#!/opt/ast/bin/ksh

# We had this situation in which we were needing to capture the output of
# programs like sftp and sqlplus into a formatted log that had to have the date
# at the beginning of each line.  Each record in the log needed to have a
# format like this:
#
# YYYYMMDD HHMISS Data...
#
# It is easy enough to capture the output of these programs into a variable,
# but just printing the the variable contents to the log results in a single
# long string--sometimes very log--on a single line of the log preceded by the
# requisite date/time stamp.  This was unacceptable.
#
# Here is a simple trick to break that data up into their proper lines so that
# they can be recorded in the required format.  It is not possible, of course,
# to capture and record the actual date/time that each line was generated by
# the original program, but it is a reasonable compromise.  The goal was to
# produce a specifically formatted log that clearly showed the sequence of
# events with a good approximation of the times of those events.
#
# Run the program to see the difference in the results.

typeset DATA
typeset LOG=program.log

function log {
 INPUT=$1
 SAVE_IFS=${IFS}
 IFS=$'\n'
 for LINE in ${INPUT} ; do
  print $(date '+%Y%m%d %H%M%S') ${LINE} >> ${LOG}
 done
 IFS=${SAVE_IFS}
}

# Capture simulated output from a separate process.  This would
# actually be running another program such as sftp or sqlplus.

DATA=$(
 cat <<- !!!
	This is a long line of output from a program that needs to be logged.
	Here is a second line.  Ideally, we want this to have its own formatted
	record in the log with the date/time preceding it.  Each line should be
	recorded in the log in this way.  There should be no lines that are
	separate in the input to just be concatenated on previous lines, but
	this is what happens when you just write the contents of the variable
	to the log as in 'print \${VAR} >> <logfile>'.  Instead, you need a simple
	trick to break them up properly and record them.
	!!!
)

# Show how we don't want the log to appear.

print $(date '+%Y%m%d %H%M%S') ${DATA} >> ${LOG} 

print "\nUndesirable result:\n"
cat ${LOG}

rm ${LOG}

# Now, show the better result.

log "${DATA}"

print "\nImproved result:\n"
cat ${LOG}

# Cleanup our log for this test.

rm ${LOG}
