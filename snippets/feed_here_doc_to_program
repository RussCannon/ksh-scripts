exit # DON'T RUN THIS!  It is just a coding tutorial.

# This is a practical example of my technique of feeding STDIN
# to a program using a here document.  In this case, we are
# launching Oracle's database management application sqlplus
# and then providing a series of commands.  It logs on, starts
# the database, and then gets its status before exiting.

{
 cat | sqlplus -S /nolog <<- !!!
	conn /as sysdba
	startup
	set heading off
	select status from v$instance;
	exit
	!!!
} 0</dev/null

# Note that we redirect STDIN from the NULL device for the
# whole block.  Programs that request keyboard input from
# STDIN during operation will leave artifacts in the input
# stream that cause the shell to exhibit erratic behavior
# after the process has run.  Specifically, the shell is left
# with prompts for input on the stack that must be cleared
# with one or more carriage returns.  By redirecting STDIN
# from the NULL device, these are cleared automatically.  I
# have used this technique in many scripts where I am per-
# forming basic operations that just require a few commands
# to sqlplus.  Instead of calling a separate SQL script that
# could be altered, I just feed my commands in like this.
# This replaces the following:

sqlplus -S /nolog @startdb

# Contents of startdb.sql:

conn /as sysdba
startup
set heading off
select status from v$instance;
exit
